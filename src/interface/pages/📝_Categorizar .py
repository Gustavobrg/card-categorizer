import streamlit as st
import pandas as pd
import os
import sys

# Adiciona o caminho para o diret√≥rio pai ao sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))
import config

# Adiciona o diret√≥rio 'src' ao sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))

from data_processing.download_fatura import baixar_anexos_email
from data_processing.PDF_parse import extrair_fatura_pdf

EXEMPLES_PATH = config.EXEMPLES_PATH
ALLOWED_CATEGORIES = config.ALLOWED_CATEGORIES

# Fun√ß√£o para carregar os dados categorizados
def carregar_dados_categorizados():
    if os.path.exists(EXEMPLES_PATH):
        return pd.read_csv(EXEMPLES_PATH)
    else:
        return pd.DataFrame(columns=['Data', 'Transa√ß√£o', 'Pa√≠s', 'Moeda', 'Valor', 'Categoria'])

# Fun√ß√£o para carregar arquivos de fatura
def carregar_arquivos_fatura():
    return [f for f in os.listdir('data') if f.startswith(('fatura', 'outros')) and f.endswith('.csv')]

# Fun√ß√£o para exibir a transa√ß√£o atual
def exibir_transacao(df, index):
    row = df.iloc[index]
    return f"Data: {row['Data']}\nTransa√ß√£o: {row['Transa√ß√£o']}\nPa√≠s: {row['Pa√≠s']}\nMoeda: {row['Moeda']}\nValor: {row['Valor']}"

# Fun√ß√£o para salvar a categoria
def salvar_categoria(df, categoria, index, opcao):
    if opcao == 1:
        st.session_state.categorized_data_opcao1.append({
            "Data": df.iloc[index]["Data"],
            "Transa√ß√£o": df.iloc[index]["Transa√ß√£o"],
            "Pa√≠s": df.iloc[index]["Pa√≠s"],
            "Moeda": df.iloc[index]["Moeda"],
            "Valor": df.iloc[index]["Valor"],
            "Categoria": categoria
        })
        st.session_state.current_index_opcao1 += 1
    elif opcao == 2:
        st.session_state.categorized_data_opcao2.append({
            "Data": df.iloc[index]["Data"],
            "Transa√ß√£o": df.iloc[index]["Transa√ß√£o"],
            "Pa√≠s": df.iloc[index]["Pa√≠s"],
            "Moeda": df.iloc[index]["Moeda"],
            "Valor": df.iloc[index]["Valor"],
            "Categoria": categoria
        })
        st.session_state.current_index_opcao2 += 1

# Inicializa o estado da sess√£o
if 'categorized_data_opcao1' not in st.session_state:
    st.session_state.categorized_data_opcao1 = []
if 'current_index_opcao1' not in st.session_state:
    st.session_state.current_index_opcao1 = 0
if 'categorized_data_opcao2' not in st.session_state:
    st.session_state.categorized_data_opcao2 = []
if 'current_index_opcao2' not in st.session_state:
    st.session_state.current_index_opcao2 = 0
if 'arquivo_selecionado_opcao2' not in st.session_state:
    st.session_state.arquivo_selecionado_opcao2 = None
if 'df_novos_exemplos_opcao2' not in st.session_state:
    st.session_state.df_novos_exemplos_opcao2 = None

# Configura a p√°gina
st.set_page_config(
    page_title="Categoriza√ß√£o de Transa√ß√µes",
    page_icon="üìù",
)

# T√≠tulo da p√°gina
st.title("Categoriza√ß√£o de Transa√ß√µes")

# Carrega os dados existentes, se houver
df_categorizados = carregar_dados_categorizados()

# Define as op√ß√µes do usu√°rio, ocultando a primeira se j√° houver dados
if df_categorizados.empty:
    opcoes = ["Categorizar novos dados", "Adicionar exemplos a partir de CSV", "Visualizar dados categorizados"]
else:
    opcoes = ["Adicionar exemplos a partir de CSV", "Visualizar dados categorizados"]
opcao = st.selectbox("Escolha uma a√ß√£o", opcoes)

@st.cache_data  # Adicione esta linha para usar o cache
def carregar_dados():
    arquivos = baixar_anexos_email()
    dfs = []
    for i, arquivo in enumerate(arquivos):
        csv_filename = f"data/fatura_{i}.csv" 
        df = extrair_fatura_pdf(arquivo, csv_filename)
        dfs.append(df)
    df = pd.concat(dfs, ignore_index=True)
    return df

# Processa a op√ß√£o selecionada
if opcao == "Categorizar novos dados":
    df = carregar_dados()  # Carrega os dados da fun√ß√£o em cache
    print(f"N√∫mero de transa√ß√µes: {df.shape[0]}")

    if st.session_state.current_index_opcao1 < len(df):
        st.write(exibir_transacao(df, st.session_state.current_index_opcao1))

        cols = st.columns(len(ALLOWED_CATEGORIES))
        for i, categoria in enumerate(ALLOWED_CATEGORIES):
            with cols[i]:
                if st.button(categoria, key=f"opcao1_{i}_{st.session_state.current_index_opcao1}"):
                    salvar_categoria(df, categoria, st.session_state.current_index_opcao1, opcao=1)

        if st.session_state.categorized_data_opcao1:
            df_categorized = pd.DataFrame(st.session_state.categorized_data_opcao1)
            st.subheader("Transa√ß√µes Categorizadas")
            st.dataframe(df_categorized)
    else:
        st.write("Todas as transa√ß√µes foram categorizadas.")
        df_categorized = pd.DataFrame(st.session_state.categorized_data_opcao1)
        df_categorized.drop_duplicates(subset=["Transa√ß√£o"], inplace=True)
        df_categorized.to_csv(EXEMPLES_PATH, index=False)
        st.write("As transa√ß√µes categorizadas foram salvas no arquivo 'transacoes_categorizadas.csv'.")

elif opcao == "Adicionar exemplos a partir de CSV":
    arquivos_fatura = carregar_arquivos_fatura()

    if st.session_state.arquivo_selecionado_opcao2 is None:
        st.session_state.arquivo_selecionado_opcao2 = st.selectbox("Selecione um arquivo de fatura", arquivos_fatura)

    if st.button("Carregar") and st.session_state.arquivo_selecionado_opcao2:
        st.session_state.df_novos_exemplos_opcao2 = pd.read_csv(os.path.join('data', st.session_state.arquivo_selecionado_opcao2))
        st.write(f"Arquivo '{st.session_state.arquivo_selecionado_opcao2}' carregado com sucesso.")

    if st.session_state.df_novos_exemplos_opcao2 is not None:
        df_novos_exemplos = st.session_state.df_novos_exemplos_opcao2

        if st.session_state.current_index_opcao2 < len(df_novos_exemplos):
            st.write(exibir_transacao(df_novos_exemplos, st.session_state.current_index_opcao2))

            cols = st.columns(len(ALLOWED_CATEGORIES))
            for i, categoria in enumerate(ALLOWED_CATEGORIES):
                with cols[i]:
                    if st.button(categoria, key=f"opcao2_{i}_{st.session_state.current_index_opcao2}"):
                        salvar_categoria(df_novos_exemplos, categoria, st.session_state.current_index_opcao2, opcao=2)

            if st.session_state.categorized_data_opcao2:
                df_categorized_novos = pd.DataFrame(st.session_state.categorized_data_opcao2)
                st.subheader("Transa√ß√µes Categorizadas da Nova Fatura")
                st.dataframe(df_categorized_novos)
        else:
            st.write("Todas as novas transa√ß√µes foram categorizadas.")
            df_categorizados = pd.concat([df_categorizados, pd.DataFrame(st.session_state.categorized_data_opcao2)], ignore_index=True)
            df_categorizados.drop_duplicates(subset=["Transa√ß√£o"], inplace=True)
            df_categorizados.to_csv(EXEMPLES_PATH, index=False)
            st.write("Novos exemplos categorizados foram adicionados e salvos com sucesso.")

elif opcao == "Visualizar dados categorizados":
    if not df_categorizados.empty:
        st.subheader("Transa√ß√µes Categorizadas")
        st.dataframe(df_categorizados)
    else:
        st.write("Nenhum dado categorizado encontrado.")